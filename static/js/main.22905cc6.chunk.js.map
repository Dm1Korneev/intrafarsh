{"version":3,"sources":["Components/App/logo.svg","Redux/middlewares/error.js","Redux/reducers/error.js","Redux/reducers/index.js","Redux/reducers/loaded.js","Redux/reducers/loading.js","Redux/shared.js","API/utils.js","Constants/index.js","API/requests.js","Redux/sagas/appStartSaga.js","Constants/actionNames.js","Redux/sagas/index.js","Redux/store.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","next","action","payload","error","console","warn","rootReducer","combineReducers","loaded","state","type","matches","exec","requestName","loading","requestState","errors","getFailureAction","name","createAction","URI","parseJSON","response","Promise","resolve","json","then","result","apiCall","body","reject","fetch","headers","Accept","method","mode","JSON","stringify","optionsConstructor","ok","catch","swagger","params","id","getRatesSaga","call","put","message","rootSaga","all","takeEvery","appStartSaga","storeFactory","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","errorMiddleware","devTools","process","run","App","props","appStart","useEffect","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22905cc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport default () => (next) => (action) => {\n  if (action.payload && action.payload.error) {\n    console.warn('[Error Middleware error]:', action.payload.error); /* eslint-disable-line no-console */\n  }\n\n  return next(action);\n};\n\n","\nexport default (state = {}, action) => {\n  const { type, payload } = action;\n  const matches = /(.*)_(REQUEST|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'FAILURE' ? payload && payload.error : '',\n  };\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport loading from './loading';\nimport loaded from './loaded';\nimport errors from './error';\n\nconst rootReducer = combineReducers({\n  loaded,\n  loading,\n  errors,\n});\n\nexport default rootReducer;\n\n","export default function loadedReducer(state = {}, action) {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(SUCCESS)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName] = matches;\n  return {\n    ...state,\n    [requestName]: true,\n  };\n}\n","export default function loadingReducer(state = {}, action) {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'REQUEST',\n  };\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const getRequestAction = (name) => createAction(`${name}_REQUEST`);\n\nexport const getSuccessAction = (name) => createAction(`${name}_SUCCESS`);\n\nexport const getFailureAction = (name) => createAction(`${name}_FAILURE`);\n\n","import { API_URL } from 'Constants';\n\nconst URI = `${API_URL}/rpc`;\n\nconst optionsConstructor = (body) => ({\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  method: 'POST',\n  mode: 'cors',\n  body: JSON.stringify(body),\n});\n\nconst parseJSON = (response) => new Promise(\n  (resolve) => response\n    .json()\n    .then(\n      (result) => resolve({\n        response,\n        result,\n      }),\n    ),\n);\n\nexport const apiCall = (body) => new Promise((resolve, reject) => {\n  fetch(URI, optionsConstructor(body))\n    .then(parseJSON)\n    .then(({ response, result }) => (response.ok ? resolve(result) : reject(result)))\n    .catch((error) => reject(error));\n});\n\nexport const getBody = (method, params, id) => ({\n  method, params, id,\n});\n","export const API_URL = 'http://intrafarsh.ru/api';\n","import { apiCall, getBody } from './utils';\n\nexport const swagger = () => apiCall(getBody('Swagger'));\n","import { call, put } from 'redux-saga/effects';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport { APP_START } from 'Constants/actionNames';\nimport { swagger } from 'API/requests';\n\nexport default function* getRatesSaga() {\n  try {\n    const result = yield call(swagger);\n    yield put(getSuccessAction(APP_START)({ result }));\n  } catch (error) {\n    yield put(getFailureAction(APP_START)({ error: error.message }));\n  }\n}\n","export const APP_START = 'APP_START';\n\n","import { all, takeEvery } from 'redux-saga/effects';\nimport { APP_START } from 'Constants/actionNames';\n\nimport { getRequestAction } from 'Redux/shared';\n\nimport appStartSaga from './appStartSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    yield takeEvery(getRequestAction(APP_START).type, appStartSaga),\n  ]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport errorMiddleware from './middlewares/error';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst storeFactory = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), errorMiddleware, sagaMiddleware],\n    devTools: process.env.NODE_ENV !== 'production',\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default storeFactory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst propTypes = {\n  appStart: PropTypes.func.isRequired,\n};\n\nfunction App(props) {\n  const { appStart } = props;\n\n  useEffect(() => {\n    appStart();\n  }, [appStart]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Intrafarsh\n        </p>\n      </header>\n    </div>\n  );\n}\n\nApp.propTypes = propTypes;\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport storeFactory from 'Redux/store';\n\nimport App from 'Components/App/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={storeFactory()}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}