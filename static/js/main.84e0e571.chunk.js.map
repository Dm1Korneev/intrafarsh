{"version":3,"sources":["Redux/middlewares/error.js","Redux/reducers/error.js","Redux/shared.js","Redux/actions.js","Constants/actionNames.js","Redux/reducers/routes.js","Redux/reducers/index.js","Redux/reducers/loaded.js","Redux/reducers/loading.js","API/utils.js","Constants/index.js","API/requests.js","Redux/sagas/appStartSaga.js","Redux/sagas/getRoutesSaga.js","Redux/sagas/index.js","Redux/store.js","Components/commonHoc.js","Selectors/routes.js","Components/Avatar/Avatar.styled.js","Components/Avatar/index.js","Components/Route/Route.styled.js","Components/Route/index.js","Components/RoutesPage/RoutesPage.styled.js","Components/RoutesPage/index.js","Components/RoutesPage/RoutesPage.js","Components/RoutePage/index.js","Components/PlacePage/index.js","Components/Navigation/index.js","Components/App/index.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["next","action","payload","error","console","warn","getRequestAction","name","createAction","getSuccessAction","getFailureAction","appStart","getRoutes","setRoutes","createReducer","builder","addCase","state","routes","rootReducer","combineReducers","loaded","type","matches","exec","requestName","loading","requestState","errors","URI","parseJSON","response","Promise","resolve","json","then","result","apiCall","body","reject","fetch","headers","Accept","method","mode","JSON","stringify","optionsConstructor","ok","catch","getBody","params","id","swagger","getRatesSaga","call","put","message","rootSaga","all","takeEvery","appStartSaga","getRoutesSaga","storeFactory","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","errorMiddleware","devTools","process","run","commonHoc","component","mapStateToProps","mapDispatchToProps","ConnectedComponent","dispatchMapper","dispatch","bindActionCreators","connect","routesSelector","Image","styled","img","Avatar","props","url","src","alt","Container","main","Route","routerName","routeID","imageUrl","to","useEffect","map","route","routeProps","RouteID","RouterName","ImageUrl","key","containerStyle","width","height","GoogleApiWrapper","apiKey","zoom","initialCenter","lat","lng","streetViewControl","mapTypeControl","position","PlacePage","Navigation","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84e0e571.chunk.js","sourcesContent":["\nexport default () => (next) => (action) => {\n  if (action.payload && action.payload.error) {\n    console.warn('[Error Middleware error]:', action.payload.error); /* eslint-disable-line no-console */\n  }\n\n  return next(action);\n};\n\n","\nexport default (state = {}, action) => {\n  const { type, payload } = action;\n  const matches = /(.*)_(REQUEST|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'FAILURE' ? payload && payload.error : '',\n  };\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const getRequestAction = (name) => createAction(`${name}_REQUEST`);\n\nexport const getSuccessAction = (name) => createAction(`${name}_SUCCESS`);\n\nexport const getFailureAction = (name) => createAction(`${name}_FAILURE`);\n\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { getRequestAction } from 'Redux/shared';\nimport { APP_START, GET_ROUTES, SET_ROUTES } from 'Constants/actionNames';\n\nexport const appStart = getRequestAction(APP_START);\n\nexport const getRoutes = getRequestAction(GET_ROUTES);\n\nexport const setRoutes = createAction(SET_ROUTES);\n","export const APP_START = 'APP_START';\n\nexport const GET_ROUTES = 'GET_ROUTES';\nexport const SET_ROUTES = 'SET_ROUTES';\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { setRoutes } from 'Redux/actions';\n\nconst defaultStore = [];\n\nexport default createReducer(defaultStore, (builder) => builder\n  .addCase(setRoutes, (state, action) => action.payload.routes));\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport loading from './loading';\nimport loaded from './loaded';\nimport errors from './error';\nimport routes from './routes';\n\nconst rootReducer = combineReducers({\n  loaded,\n  loading,\n  errors,\n  routes,\n});\n\nexport default rootReducer;\n\n","export default function loadedReducer(state = {}, action) {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(SUCCESS)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName] = matches;\n  return {\n    ...state,\n    [requestName]: true,\n  };\n}\n","export default function loadingReducer(state = {}, action) {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'REQUEST',\n  };\n}\n","import { API_URL } from 'Constants';\n\nconst URI = `${API_URL}/rpc`;\n\nconst optionsConstructor = (body) => ({\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  method: 'POST',\n  mode: 'cors',\n  body: JSON.stringify(body),\n});\n\nconst parseJSON = (response) => new Promise(\n  (resolve) => response\n    .json()\n    .then(\n      (result) => resolve({\n        response,\n        result,\n      }),\n    ),\n);\n\nexport const apiCall = (body) => new Promise((resolve, reject) => {\n  fetch(URI, optionsConstructor(body))\n    .then(parseJSON)\n    .then(({ response, result }) => (response.ok ? resolve(result.result) : reject(result)))\n    .catch((error) => reject(error));\n});\n\nexport const getBody = (method, params, id) => ({\n  method, params, id,\n});\n","export const API_URL = 'https://intrafarsh.ru/api';\nexport const GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\n","import { apiCall, getBody } from './utils';\n\nexport const swagger = () => apiCall(getBody('Swagger'));\n\nexport const getRoutes = () => apiCall(getBody('Routes'));\n","import { call, put } from 'redux-saga/effects';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport { APP_START } from 'Constants/actionNames';\nimport { swagger } from 'API/requests';\n\nexport default function* getRatesSaga() {\n  try {\n    const result = yield call(swagger);\n    yield put(getSuccessAction(APP_START)({ result }));\n  } catch (error) {\n    yield put(getFailureAction(APP_START)({ error: error.message }));\n  }\n}\n","import { call, put } from 'redux-saga/effects';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport { setRoutes } from 'Redux/actions';\nimport { GET_ROUTES } from 'Constants/actionNames';\nimport { getRoutes } from 'API/requests';\n\nexport default function* getRatesSaga() {\n  try {\n    const routes = yield call(getRoutes);\n    yield put(setRoutes({ routes }));\n    yield put(getSuccessAction(GET_ROUTES)({ routes }));\n  } catch (error) {\n    yield put(getFailureAction(GET_ROUTES)({ error: error.message }));\n  }\n}\n","import { all, takeEvery } from 'redux-saga/effects';\nimport { APP_START, GET_ROUTES } from 'Constants/actionNames';\n\nimport { getRequestAction } from 'Redux/shared';\n\nimport appStartSaga from './appStartSaga';\nimport getRoutesSaga from './getRoutesSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    yield takeEvery(getRequestAction(APP_START).type, appStartSaga),\n    yield takeEvery(getRequestAction(GET_ROUTES).type, getRoutesSaga),\n  ]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport errorMiddleware from './middlewares/error';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst storeFactory = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), errorMiddleware, sagaMiddleware],\n    devTools: process.env.NODE_ENV !== 'production',\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default storeFactory;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nconst commonHoc = (component, params) => {\n  const {\n    mapStateToProps = null,\n    mapDispatchToProps = null,\n  } = params;\n\n  const isConnected = mapStateToProps || mapDispatchToProps;\n\n  let ConnectedComponent = component;\n\n  if (isConnected) {\n    const dispatchMapper = !mapDispatchToProps ? null\n      : (dispatch) => bindActionCreators(mapDispatchToProps, dispatch);\n\n    ConnectedComponent = connect(mapStateToProps, dispatchMapper)(component);\n  }\n\n  return ConnectedComponent;\n};\n\nexport default commonHoc;\n","\nexport const routesSelector = (state) => state.routes;\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n    width: 5rem;\n    height: 5rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Image } from './Avatar.styled';\n\nconst propTypes = {\n  url: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nconst Avatar = (props) => {\n  const { url, name } = props;\n\n  return (<Image src={url} alt={`Avatar of ${name}`} />);\n};\n\nAvatar.propTypes = propTypes;\n\nexport default Avatar;\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n    margin-bottom: 1rem;\n    border-radius: 0.5rem;\n    background-color: #888;\n    padding: 1rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport Avatar from 'Components/Avatar';\n\nimport { Container } from './Route.styled';\n\nconst propTypes = {\n  routerName: PropTypes.string.isRequired,\n  routeID: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string.isRequired,\n};\n\nconst Route = (props) => {\n  const { routerName, routeID, imageUrl } = props;\n\n  return (\n    <Link to={`/route/${routeID}`}>\n      <Container>\n        {`routerName: ${routerName}`}\n        {`routeID: ${routeID}`}\n        <Avatar url={imageUrl} name={routerName} />\n      </Container>\n    </Link>\n  );\n};\n\nRoute.propTypes = propTypes;\n\nexport default Route;\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n    padding: 1rem;\n`;\n","import commonHoc from 'Components/commonHoc';\nimport { getRoutes } from 'Redux/actions';\nimport { routesSelector } from 'Selectors/routes';\n\nimport RoutesPage from './RoutesPage';\n\nconst mapStateToProps = (state) => ({\n  routes: routesSelector(state),\n});\n\nconst mapDispatchToProps = {\n  getRoutes,\n};\n\nexport default commonHoc(RoutesPage, {\n  mapDispatchToProps, mapStateToProps,\n});\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Route from 'Components/Route';\n\nimport { Container } from './RoutesPage.styled';\n\nconst propTypes = {\n  getRoutes: PropTypes.func.isRequired,\n  routes: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst RoutePage = (props) => {\n  const { getRoutes, routes } = props;\n\n  useEffect(() => {\n    getRoutes();\n  }, [getRoutes]);\n\n  return (\n    <Container>\n      {routes.map((route) => {\n        const routeProps = {\n          routeID: route.RouteID,\n          routerName: route.RouterName,\n          imageUrl: route.ImageUrl,\n        };\n\n        return (<Route key={route.RouteID} {...routeProps} />);\n      })}\n    </Container>\n  );\n};\n\nRoutePage.propTypes = propTypes;\n\nexport default RoutePage;\n","import React from 'react';\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\nimport { GOOGLE_MAP_API_KEY } from 'Constants';\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nconst RoutePage = (props) => (\n  <Map\n    zoom={16}\n    containerStyle={containerStyle}\n    initialCenter={{\n      lat: 55.7087173,\n      lng: 37.7277525,\n    }}\n    streetViewControl={false}\n    mapTypeControl={false}\n    {...props}\n  >\n    <Marker\n      name=\"Congress centre Technopolis Moscow\"\n      position={{\n        lat: 55.7083437,\n        lng: 37.7245968,\n      }}\n    />\n  </Map>\n);\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY,\n})(RoutePage);\n","import React from 'react';\n\nconst PlacePage = () => (\n  <div>\n      Place page\n  </div>\n);\n\nexport default PlacePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"/routes\">Routes</Link>\n      </li>\n      <li>\n        <Link to=\"/route\">Route</Link>\n      </li>\n      <li>\n        <Link to=\"/place\">Place</Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import commonHoc from 'Components/commonHoc';\nimport { appStart } from 'Redux/actions';\n\nimport App from './App';\n\nconst mapDispatchToProps = {\n  appStart,\n};\n\nexport default commonHoc(App, {\n  mapDispatchToProps,\n});\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route as RouteFromRouter, HashRouter as Router, Switch } from 'react-router-dom';\n\nimport RoutesPage from 'Components/RoutesPage';\nimport RoutePage from 'Components/RoutePage';\nimport PlacePage from 'Components/PlacePage';\nimport Navigation from 'Components/Navigation';\n\nconst propTypes = {\n  appStart: PropTypes.func.isRequired,\n};\n\nconst App = (props) => {\n  const { appStart } = props;\n\n  useEffect(() => {\n    appStart();\n  }, [appStart]);\n\n  return (\n    <Router>\n      <Switch>\n        <RouteFromRouter path=\"/routes\">\n          <RoutesPage />\n        </RouteFromRouter>\n        <RouteFromRouter path=\"/route\">\n          <RoutePage />\n        </RouteFromRouter>\n        <RouteFromRouter path=\"/place\">\n          <PlacePage />\n        </RouteFromRouter>\n        <RouteFromRouter path=\"/\">\n          <Navigation />\n        </RouteFromRouter>\n      </Switch>\n    </Router>\n  );\n};\n\nApp.propTypes = propTypes;\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport storeFactory from 'Redux/store';\n\nimport App from 'Components/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={storeFactory()}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}